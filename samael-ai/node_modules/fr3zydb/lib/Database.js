const fs = require('fs');
const moment = require('moment');   
const path = require('path');

class Database {
    constructor(dbPath = './fr3zydb.json') {
        this.dbPath = dbPath;
        this.loadData();
    }
    

    loadData() {
        try {
            const fileContent = fs.readFileSync(this.dbPath, 'utf-8');
            this.data = JSON.parse(fileContent);
        } catch (error) {
            this.data = {};
            this.save();
        }
    }

    backup() {
        const timestamp = moment().format('YYYY-MM-DD_HH-mm-ss');
        const backupFileName = `backup_${timestamp}.json`;
        const backupPath = path.join(__dirname, '../fr3zydb_yedek', backupFileName);

        if (!fs.existsSync(path.join(__dirname, '../fr3zydb_yedek'))) {
            fs.mkdirSync(path.join(__dirname, '../fr3zydb_yedek'));
        }

        fs.copyFileSync(this.dbPath, backupPath);
        console.log(`VeritabanÄ± yedeklendi: ${backupFileName}`);
        
    }

    save() {
        fs.writeFileSync(this.dbPath, JSON.stringify(this.data, null, 2));
    }

    set(key, value) {
        this.data[key] = value;
        this.save();
    }

    get(key) {
        return this.data[key];
    }

    fetch(key, defaultValue = null) {
        return this.data.hasOwnProperty(key) ? this.data[key] : defaultValue;
    }
    
    delete(key) {
        if (this.data.hasOwnProperty(key)) {
            delete this.data[key];
            this.save();
        }
    }

    push(key, value) {
        if (Array.isArray(this.data[key])) {
            this.data[key].push(value);
            this.save();
        } else {
            this.data[key] = [value];
            this.save();
        }
    }

    unpush(key, value) {
        if (Array.isArray(this.data[key])) {
            const index = this.data[key].indexOf(value);
            if (index > -1) {
                this.data[key].splice(index, 1);
                this.save();
            }
        }
    }

    has(key) {
        return this.data.hasOwnProperty(key);
    }

    deleteAll() {
        this.data = {};
        this.save();
    }

    all() {
        return this.data;
    }
}

module.exports = new Database();
